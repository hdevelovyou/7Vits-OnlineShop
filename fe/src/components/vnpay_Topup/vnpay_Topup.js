import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './vnpay_Topup.scss';

const VnpayTopup = () => {
    const [amount, setAmount] = useState('');
    const [userId, setUserId] = useState('');
    const [userName, setUserName] = useState('');
    const [loading, setLoading] = useState(false);
    
    // Ki·ªÉm tra v√† x·ª≠ l√Ω VNPay params trong URL khi component mount
    useEffect(() => {
        // T√°ch x·ª≠ l√Ω VNPay redirect th√†nh m·ªôt h√†m ri√™ng
        const handleVnpayRedirect = () => {
            const urlParams = new URLSearchParams(window.location.search);
            // N·∫øu URL c√≥ ch·ª©a VNPay params, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang return
            if (urlParams.has('vnp_ResponseCode')) {
                console.log('Detected VNPay params, redirecting to result page...');
                // X√≥a flag thanh to√°n v√¨ tr√¨nh duy·ªát ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω k·∫øt qu·∫£
                localStorage.removeItem('vnpay_payment_timestamp');
                window.location.replace('/payment/vnpay_return' + window.location.search);
                return true;
            }
            return false;
        };

        // X·ª≠ l√Ω khi component mount
        if (!handleVnpayRedirect()) {
            // L·∫•y th√¥ng tin user n·∫øu kh√¥ng ph·∫£i l√† redirect t·ª´ VNPay
            loadUserInfo();
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i l√† refresh sau khi thanh to√°n kh√¥ng
            const paymentTimestamp = localStorage.getItem('vnpay_payment_timestamp');
            if (paymentTimestamp) {
                const currentTime = new Date().getTime();
                const timeSincePayment = currentTime - parseInt(paymentTimestamp);
                
                // N·∫øu ƒë√£ qu√° 5 ph√∫t (300000ms), x√≥a flag thanh to√°n
                if (timeSincePayment > 300000) {
                    localStorage.removeItem('vnpay_payment_timestamp');
                } 
                // N·∫øu trong v√≤ng 5 ph√∫t, c√≥ th·ªÉ l√† refresh trang sau khi thanh to√°n
                else {
                    console.log('Payment in progress detected, preventing new payment requests');
                }
            }
        }
    }, []);
    
    // T√°ch vi·ªác load th√¥ng tin user th√†nh h√†m ri√™ng
    const loadUserInfo = () => {
        try {
            const userString = localStorage.getItem('user');
            if (userString) {
                const userData = JSON.parse(userString);
                if (userData && userData.id) {
                    setUserId(userData.id.toString());
                }
                if (userData && userData.userName) {
                    setUserName(userData.userName);
                } else if (userData && userData.firstName) {
                    setUserName(`${userData.firstName} ${userData.lastName || ''}`);
                }
            }
        } catch (error) {
            console.error('Error parsing user data from localStorage:', error);
        }
    };

    const handleAmountSelect = (value) => {
        setAmount(value);
    };
    
    const handlePayment = async () => {
        // Ki·ªÉm tra xem c√≥ ƒëang trong qu√° tr√¨nh thanh to√°n kh√¥ng
        const paymentTimestamp = localStorage.getItem('vnpay_payment_timestamp');
        if (paymentTimestamp) {
            const currentTime = new Date().getTime();
            const timeSincePayment = currentTime - parseInt(paymentTimestamp);
            
            // N·∫øu ch∆∞a qu√° 5 ph√∫t, ngƒÉn y√™u c·∫ßu thanh to√°n m·ªõi
            if (timeSincePayment < 300000) {
                alert('ƒê√£ c√≥ y√™u c·∫ßu thanh to√°n ƒëang x·ª≠ l√Ω. Vui l√≤ng ƒë·ª£i ho·∫∑c l√†m m·ªõi trang sau 5 ph√∫t.');
                return;
            }
        }

        // Check if userId exists in state or try to get it from localStorage again
        let currentUserId = userId;
        if (!currentUserId || currentUserId.trim() === '') {
            try {
                const userString = localStorage.getItem('user');
                if (userString) {
                    const userData = JSON.parse(userString);
                    if (userData && userData.id) {
                        currentUserId = userData.id.toString();
                        setUserId(currentUserId);
                    }
                }
            } catch (error) {
                console.error('Error getting user ID:', error);
            }
            
            if (!currentUserId || currentUserId.trim() === '') {
                alert('Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi thanh to√°n.');
                return;
            }
        }
    
        try {
          setLoading(true);
          
          // ƒê√°nh d·∫•u th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu thanh to√°n
          const currentTime = new Date().getTime();
          localStorage.setItem('vnpay_payment_timestamp', currentTime.toString());
          
          console.log('üí∞ Sending payment request with userId:', currentUserId, 'amount:', amount);
          
          const returnUrl = window.location.origin + '/payment/vnpay_return';
          console.log('üìç Return URL:', returnUrl);
          
          const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/topup/create_payment_url`, {
            amount: amount,
            userId: currentUserId,
            orderInfo: 'N·∫°p ti·ªÅn v√†o v√≠',
            orderType: 'billpayment',
            locale: 'vn',
            bankCode: '',
            returnUrl: returnUrl
          });
          
          console.log('‚úÖ Payment URL created:', response.data);
    
          if (response.data.vnpUrl) {
            console.log('üîÑ Redirecting to payment page...');
            // S·ª≠ d·ª•ng window.location.replace thay v√¨ href ƒë·ªÉ tr√°nh l·ªãch s·ª≠ tr√¨nh duy·ªát
            window.location.replace(response.data.vnpUrl);
          }
        } catch (error) {
          console.error('‚ùå Payment error:', error);
          alert('C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n: ' + (error.response?.data?.message || error.message));
          // X√≥a flag thanh to√°n n·∫øu c√≥ l·ªói
          localStorage.removeItem('vnpay_payment_timestamp');
        } finally {
          setLoading(false);
        }
    };

    return(
        <div className='topup-container'>
            <div className="payment-container">
                <h1>N·∫°p ti·ªÅn v√†o v√≠</h1>
                {userName && <p className="user-greeting">Xin ch√†o, {userName}!</p>}
                <div className="payment-form">
                   <div className="amount-options">
                       <h2>Ch·ªçn s·ªë ti·ªÅn c·∫ßn n·∫°p:</h2>
                       <div className="amount-buttons">
                           <button onClick={() => handleAmountSelect(50000)}>50.000ƒë</button>
                           <button onClick={() => handleAmountSelect(100000)}>100.000ƒë</button>
                           <button onClick={() => handleAmountSelect(200000)}>200.000ƒë</button>
                           <button onClick={() => handleAmountSelect(500000)}>500.000ƒë</button>
                       </div>
                       <div className="selected-amount">
                           {amount ? `S·ªë ti·ªÅn ƒë√£ ch·ªçn: ${amount.toLocaleString()}ƒë` : 'Vui l√≤ng ch·ªçn s·ªë ti·ªÅn'}
                       </div>
                       <button 
                           className="pay-button"
                           onClick={handlePayment}
                           disabled={loading || !amount || localStorage.getItem('vnpay_payment_timestamp')}
                       >
                           {loading ? 'ƒêang x·ª≠ l√Ω...' : 
                            localStorage.getItem('vnpay_payment_timestamp') ? 'ƒêang x·ª≠ l√Ω thanh to√°n...' : 
                            'Thanh to√°n ngay'}
                       </button>
                   </div>
                </div>
             </div>
        </div>
      );
};

export default VnpayTopup;