const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: './.env' });

// Ki·ªÉm tra API key
const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
    console.error('‚ùå GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file config.env');
    process.exit(1);
}

console.log('‚úÖ Gemini API Key ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng');

// Kh·ªüi t·∫°o Gemini AI v·ªõi API key
const genAI = new GoogleGenerativeAI(apiKey);

// Prompt cho chatbot h·ªó tr·ª£ kh√°ch h√†ng
const CUSTOMER_SUPPORT_PROMPT = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh t√™n l√† "VitBot" c·ªßa c·ª≠a h√†ng tr·ª±c tuy·∫øn 7Vits. Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ kh√°ch h√†ng m·ªôt c√°ch th√¢n thi·ªán v√† chuy√™n nghi·ªáp.

TH√îNG TIN V·ªÄ C·ª¨A H√ÄNG:
- T√™n: 7Vits Online Shop
- Chuy√™n b√°n: V·∫≠t ph·∫©m ·∫£o
- Ch√≠nh s√°ch ƒë·ªïi tr·∫£: 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng
- Hotline: 1900-7777
- Email: 7vits.shop@gmail.com

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Lu√¥n ch√†o h·ªèi th√¢n thi·ªán
2. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
3. Cung c·∫•p th√¥ng tin ch√≠nh x√°c v·ªÅ s·∫£n ph·∫©m, ch√≠nh s√°ch
4. H∆∞·ªõng d·∫´n chi ti·∫øt khi kh√°ch h·ªèi v·ªÅ quy tr√¨nh mua h√†ng, thanh to√°n
5. Khi kh√¥ng bi·∫øt th√¥ng tin c·ª• th·ªÉ, h√£y h∆∞·ªõng d·∫´n kh√°ch li√™n h·ªá hotline
6. Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi c√≥ th·ªÉ gi√∫p g√¨ th√™m

H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch chuy√™n nghi·ªáp:


ƒê√¢y l√† Ch√≠nh s√°ch c·ªßa Shop:
Ch√≠nh S√°ch Mua B√°n & Giao D·ªãch
1. ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng
Ch√≠nh s√°ch n√†y √°p d·ª•ng cho t·∫•t c·∫£ ng∆∞·ªùi mua v√† ng∆∞·ªùi b√°n tham gia giao d·ªãch tr√™n n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i, bao g·ªìm c√°c s·∫£n ph·∫©m s·ªë nh∆∞:
CD Key (Steam, Origin, Battle.net,...)
T√†i kho·∫£n game (Account Game)
V·∫≠t ph·∫©m game v√† d·ªãch v·ª• s·ªë kh√°c
2. Quy ƒë·ªãnh v·ªõi ng∆∞·ªùi b√°n
2.1. ƒêi·ªÅu ki·ªán t√†i kho·∫£n b√°n h√†ng
Ng∆∞·ªùi b√°n ph·∫£i cung c·∫•p t√†i kho·∫£n tr·∫Øng th√¥ng tin, nghƒ©a l√†:
Kh√¥ng li√™n k·∫øt email, s·ªë ƒëi·ªán tho·∫°i, b·∫£o m·∫≠t 2 l·ªõp.
Kh√¥ng c√≥ l·ªãch s·ª≠ c√° nh√¢n tr√™n t√†i kho·∫£n (email c√° nh√¢n, th√¥ng tin thanh to√°n, li√™n k·∫øt n·ªÅn t·∫£ng kh√°c).
T√†i kho·∫£n c·∫ßn s·∫µn s√†ng ƒë·ªÉ ng∆∞·ªùi mua c√≥ th·ªÉ ƒë·ªïi th√¥ng tin ngay sau khi nh·∫≠n h√†ng.
2.2. Ch√≠nh s√°ch r√∫t ti·ªÅn
S·ªë ti·ªÅn thu ƒë∆∞·ª£c t·ª´ m·ªói ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c t·∫°m gi·ªØ trong 7 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm giao d·ªãch th√†nh c√¥ng.
Sau 7 ng√†y, n·∫øu kh√¥ng c√≥ khi·∫øu n·∫°i ho·∫∑c y√™u c·∫ßu b·∫£o h√†nh t·ª´ ng∆∞·ªùi mua, s·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông m·ªü kh√≥a ƒë·ªÉ r√∫t.
Trong th·ªùi gian n√†y, ng∆∞·ªùi b√°n c√≥ tr√°ch nhi·ªám h·ªó tr·ª£ b·∫£o h√†nh n·∫øu c√≥ l·ªói x·∫£y ra theo m·ª•c 3 b√™n d∆∞·ªõi.
3. Ch√≠nh s√°ch b·∫£o h√†nh
T·∫•t c·∫£ t√†i kho·∫£n game ho·∫∑c key game b√°n ra ph·∫£i c√≥ th·ªùi gian b·∫£o h√†nh t·ªëi thi·ªÉu 7 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm giao h√†ng.
B·∫£o h√†nh √°p d·ª•ng trong c√°c tr∆∞·ªùng h·ª£p:
T√†i kho·∫£n kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p do b·ªã thu h·ªìi.
Key b·ªã kh√≥a, ƒë√£ qua s·ª≠ d·ª•ng ho·∫∑c kh√¥ng k√≠ch ho·∫°t ƒë∆∞·ª£c do l·ªói t·ª´ ph√≠a ng∆∞·ªùi b√°n.
Kh√¥ng b·∫£o h√†nh trong c√°c tr∆∞·ªùng h·ª£p:
Ng∆∞·ªùi mua t·ª± thay ƒë·ªïi th√¥ng tin g√¢y m·∫•t quy·ªÅn truy c·∫≠p.
B·ªã kh√≥a t√†i kho·∫£n do vi ph·∫°m ƒëi·ªÅu kho·∫£n nh√† ph√°t h√†nh (s·ª≠ d·ª•ng cheat, tool, thay ƒë·ªïi IP li√™n t·ª•c,...).
4. Ch√≠nh s√°ch d√†nh cho ng∆∞·ªùi mua
4.1. Quy tr√¨nh nh·∫≠n s·∫£n ph·∫©m
Sau khi thanh to√°n th√†nh c√¥ng, ng∆∞·ªùi mua s·∫Ω nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m qua email ho·∫∑c giao di·ªán t√†i kho·∫£n.
Ng∆∞·ªùi mua c√≥ tr√°ch nhi·ªám ki·ªÉm tra ngay v√† ti·∫øn h√†nh ƒë·ªïi th√¥ng tin t√†i kho·∫£n (n·∫øu l√† account) ƒë·ªÉ tr√°nh b·ªã m·∫•t quy·ªÅn ki·ªÉm so√°t.
4.2. Khi·∫øu n·∫°i v√† ho√†n ti·ªÅn
Khi·∫øu n·∫°i c·∫ßn ƒë∆∞·ª£c g·ª≠i trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y mua.
C·∫ßn c√≥ b·∫±ng ch·ª©ng r√µ r√†ng (video/·∫£nh ghi l·∫°i qu√° tr√¨nh s·ª≠ d·ª•ng s·∫£n ph·∫©m, l·ªói g·∫∑p ph·∫£i).
Ch√∫ng t√¥i s·∫Ω ƒë√≥ng vai tr√≤ trung gian x·ª≠ l√Ω tranh ch·∫•p gi·ªØa hai b√™n.
5. Tr√°ch nhi·ªám v√† cam k·∫øt
Ch√∫ng t√¥i ch·ªâ l√† n·ªÅn t·∫£ng trung gian, kh√¥ng tr·ª±c ti·∫øp t·∫°o ra s·∫£n ph·∫©m.
Cam k·∫øt gi·ªØ ti·ªÅn trung gian v√† ƒë·∫£m b·∫£o quy·ªÅn l·ª£i hai chi·ªÅu:
Ng∆∞·ªùi mua ƒë∆∞·ª£c nh·∫≠n ƒë√∫ng s·∫£n ph·∫©m, ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.
Ng∆∞·ªùi b√°n nh·∫≠n ti·ªÅn sau khi h·∫øt th·ªùi gian b·∫£o h√†nh cam k·∫øt.
M·ªçi h√†nh vi gian l·∫≠n, spam, ho·∫∑c b√°n s·∫£n ph·∫©m vi ph·∫°m b·∫£n quy·ªÅn s·∫Ω b·ªã kh√≥a t√†i kho·∫£n vƒ©nh vi·ªÖn.
6. Li√™n h·ªá h·ªó tr·ª£
Email: 7vits.shop@gmail.com
Hotline/Zalo/Fanpage: 7VITS - https://www.facebook.com/7vits.shop
Th·ªùi gian l√†m vi·ªác: 8h ‚Äì 22h h√†ng ng√†y
`;

const chatbotController = {
    // API x·ª≠ l√Ω tin nh·∫Øn t·ª´ chatbot
    async sendMessage(req, res) {
        try {
            const { message, conversationHistory = [] } = req.body;

            if (!message) {
                return res.status(400).json({
                    success: false,
                    error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                });
            }

            console.log('üì© Nh·∫≠n tin nh·∫Øn t·ª´ user:', message);

            // Kh·ªüi t·∫°o model - S·ª≠ d·ª•ng model m·ªõi thay v√¨ gemini-pro ƒë√£ deprecated
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

            // T·∫°o context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
            let conversationContext = "";
            if (conversationHistory.length > 0) {
                conversationContext = "\n\nL·ªãch s·ª≠ h·ªôi tho·∫°i:\n";
                conversationHistory.forEach((msg, index) => {
                    conversationContext += `${msg.role}: ${msg.content}\n`;
                });
            }

            // T·∫°o prompt ho√†n ch√¨nh
            const fullPrompt = CUSTOMER_SUPPORT_PROMPT + conversationContext + "\n\nC√¢u h·ªèi c·ªßa kh√°ch h√†ng: " + message;

            console.log('ü§ñ ƒêang g·ªçi Gemini API...');

            // G·ªçi API Gemini
            const result = await model.generateContent(fullPrompt);
            const response = await result.response;
            const text = response.text();

            console.log('‚úÖ Gemini API ph·∫£n h·ªìi th√†nh c√¥ng');

            // Tr·∫£ v·ªÅ k·∫øt qu·∫£
            res.json({
                success: true,
                response: text,
                timestamp: new Date().toISOString()
            });

        } catch (error) {
            console.error('‚ùå L·ªói chatbot chi ti·∫øt:', {
                message: error.message,
                stack: error.stack,
                name: error.name
            });
            
            let errorMessage = 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.';
            
            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
            if (error.message.includes('API key not valid')) {
                errorMessage = 'API key Gemini kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.';
            } else if (error.message.includes('quota')) {
                errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.';
            } else if (error.message.includes('network')) {
                errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet.';
            }
            
            res.status(500).json({
                success: false,
                error: errorMessage,
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    },

    // API l·∫•y th√¥ng tin tr·∫°ng th√°i chatbot
    async getStatus(req, res) {
        try {
            res.json({
                success: true,
                status: 'online',
                botName: 'VitBot',
                capabilities: [
                    'T∆∞ v·∫•n s·∫£n ph·∫©m',
                    'H∆∞·ªõng d·∫´n mua h√†ng', 
                    'Ch√≠nh s√°ch ƒë·ªïi tr·∫£',
                    'H·ªó tr·ª£ thanh to√°n'
                ]
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin tr·∫°ng th√°i'
            });
        }
    },

    // API reset cu·ªôc h·ªôi tho·∫°i
    async resetConversation(req, res) {
        try {
            res.json({
                success: true,
                message: 'Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c reset',
                timestamp: new Date().toISOString()
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: 'Kh√¥ng th·ªÉ reset cu·ªôc h·ªôi tho·∫°i'
            });
        }
    }
};

module.exports = chatbotController; 